include config/Makefile.common

CC = gcc
CXX = g++
AR = ar
TARGET_NAME = nibble8
INFOFILE = assets/nibble8_libretro.info

STATIC_LINKING := 0
LIBS_LIST = libpng
LIBS = $(foreach lib,$(LIBS_LIST),$(shell pkg-config --libs --static $(lib))) -lm

CFLAGS += -Wall $(foreach lib,$(LIBS_LIST),$(shell pkg-config --cflags $(lib))) -I$(SRCDIR) -Wno-unused-function -ffunction-sections -fPIC -D__LIBRETRO__
CXXFLAGS += $(CFLAGS)
LDFLAGS += $(LIBS)

ifneq ($(ARCH),)
    CFLAGS += -arch $(ARCH)
endif

ifeq ($(SANITIZER),)
    SANITIZER :=
endif
CFLAGS += -fsanitize=$(SANITIZER)
CXXFLAGS += -fsanitize=$(SANITIZER)
LDFLAGS += -fsanitize=$(SANITIZER)

# Platform detection
ifeq ($(platform),)
platform = unix
ifeq ($(shell uname -a),)
    platform = win
else ifneq ($(findstring MINGW,$(shell uname -a)),)
    platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
    platform = osx
else ifneq ($(findstring win,$(shell uname -a)),)
    platform = win
endif
endif

# system platform
system_platform = unix
ifeq ($(shell uname -a),)
    EXE_EXT = .exe
    system_platform = win
else ifneq ($(findstring Darwin,$(shell uname -a)),)
    system_platform = osx
    arch = intel
ifeq ($(shell uname -p),powerpc)
    arch = ppc
endif
else ifneq ($(findstring MINGW,$(shell uname -a)),)
    system_platform = win
endif

ifeq ($(ARCHFLAGS),)
ifeq ($(archs),ppc)
    ARCHFLAGS = -arch ppc -arch ppc64
else
    ARCHFLAGS = -arch i386 -arch x86_64
endif
endif

ifeq ($(platform), osx)
ifndef ($(NOUNIVERSAL))
    CXXFLAGS += $(ARCHFLAGS)
    LFLAGS += $(ARCHFLAGS)
endif
endif

ifeq ($(STATIC_LINKING), 1)
EXT := a
endif

ifeq ($(platform), unix)
    EXT ?= so
    TARGET := $(TARGET_NAME)_libretro.$(EXT)
    fpic := -fPIC
    SHARED := -shared -Wl,--version-script=$(CORE_DIR)/link.T -Wl,--no-undefined
else ifeq ($(platform), linux-portable)
    TARGET := $(TARGET_NAME)_libretro.$(EXT)
    fpic := -fPIC -nostdlib
    SHARED := -shared -Wl,--version-script=$(CORE_DIR)/link.T
    LIBM :=
else ifneq (,$(findstring osx,$(platform)))
    TARGET := $(TARGET_NAME)_libretro.dylib
    fpic := -fPIC
    SHARED := -dynamiclib
else ifneq (,$(findstring ios,$(platform)))
    TARGET := $(TARGET_NAME)_libretro_ios.dylib
    fpic := -fPIC
    SHARED := -dynamiclib
ifeq ($(IOSSDK),)
    IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
endif
    DEFINES := -DIOS
    CC = cc -arch armv7 -isysroot $(IOSSDK)
ifeq ($(platform),ios9)
    CC += -miphoneos-version-min=8.0
    CXXFLAGS += -miphoneos-version-min=8.0
else
    CC += -miphoneos-version-min=5.0
    CXXFLAGS += -miphoneos-version-min=5.0
endif
else ifneq (,$(findstring qnx,$(platform)))
    TARGET := $(TARGET_NAME)_libretro_qnx.so
    fpic := -fPIC
    SHARED := -shared -Wl,--version-script=$(CORE_DIR)/link.T -Wl,--no-undefined
else ifeq ($(platform), emscripten)
    TARGET := $(TARGET_NAME)_libretro_emscripten.bc
    fpic := -fPIC
    SHARED := -shared -Wl,--version-script=$(CORE_DIR)/link.T -Wl,--no-undefined
else ifeq ($(platform), vita)
    TARGET := $(TARGET_NAME)_vita.a
    CC = arm-vita-eabi-gcc
    AR = arm-vita-eabi-ar
    CXXFLAGS += -Wl,-q -Wall -O3
    STATIC_LINKING = 1
else
    CC = gcc
    TARGET := $(TARGET_NAME)_libretro.dll
    SHARED := -shared -static-libgcc -static-libstdc++ -s -Wl,--version-script=$(CORE_DIR)/link.T -Wl,--no-undefined
endif

LDFLAGS += $(LIBM)

ifeq ($(DEBUG), 1)
    CFLAGS += -O0 -g -DDEBUG
    CXXFLAGS += -O0 -g -DDEBUG
else
    CFLAGS += -O3
    CXXFLAGS += -O3
endif

OBJDIR = obj/retroarch
BUILDDIR = bin/retroarch
TARGET_NAME := nibble8
CORE_DIR += .

# Excluding all adapters from the common sources
COMMON_SOURCES := $(filter-out $(SRCDIR)/adapters/%, $(shell find $(SRCDIR) -type f -name *.c))

# Libretro-specific sources
RETROARCH_SOURCES := $(shell find $(SRCDIR)/adapters/retroarch -type f -name *.c)

# Combine common sources with the libretro-specific sources
SOURCES := $(COMMON_SOURCES) $(RETROARCH_SOURCES)
OBJECTS := $(SOURCES:$(SRCDIR)/%.c=$(OBJDIR)/%.o)

CFLAGS += -Wall -D__LIBRETRO__ $(fpic)
CXXFLAGS += -Wall -D__LIBRETRO__ $(fpic)

all: CFLAGS += -O2
all: rom $(BUILDDIR)/$(TARGET)

debug: CFLAGS += -g -fsanitize=address
debug: rom $(BUILDDIR)/$(TARGET)

$(BUILDDIR)/$(TARGET): $(OBJECTS)
ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJECTS)
else
	@$(if $(Q), $(shell echo echo LD $@),)
	$(Q)$(CXX) $(fpic) $(SHARED) $(INCLUDES) -o $@ $(OBJECTS) $(LDFLAGS)
endif

$(OBJDIR)/%.o: $(SRCDIR)/%.c
	@mkdir -p $(@D)
	@$(if $(Q), $(shell echo echo CC $<),)
	$(Q)$(CC) $(CFLAGS) $(fpic) -c -o $@ $<

$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	@mkdir -p $(@D)
	@$(if $(Q), $(shell echo echo CXX $<),)
	$(Q)$(CXX) $(CXXFLAGS) $(fpic) -c -o $@ $<

.PHONY: clean
clean:
	@rm -rf $(OBJDIR) $(BUILDDIR)

font2bin: $(TOOLSDIR)/font2bin.c
	$(CC) $(CFLAGS) -o $(TOOLSDIR)/font2bin $^ $(LIBS)

rom: $(ROMFILES:%=$(ROMDIR)/%)
	@mkdir -p $(BUILDDIR)
	@cp $(ASSETSDIR)/icon.png $(BUILDDIR)
	@cp $(ROMDIR)/config_default.ini $(BUILDDIR)/config.ini
	@cp -R $(ASSETSDIR)/drive_c $(BUILDDIR)
	@rm -f $(BUILDDIR)/nibble8-rom.zip
	@cd $(ROMDIR) && zip -r ../../$(BUILDDIR)/nibble8-rom.zip $(ROMFILES)
	python3 $(TOOLSDIR)/binary_to_header.py $(BUILDDIR)/nibble8-rom.zip $(SRCDIR)/adapters/retroarch rom

package: $(BUILDDIR)/$(TARGET)
	@mkdir -p $(BUILDDIR)/package/cores
	@mkdir -p $(BUILDDIR)/package/info
	@cp $(BUILDDIR)/$(TARGET) $(BUILDDIR)/package/cores/
	@cp $(INFOFILE) $(BUILDDIR)/package/info/
	@echo "Creating package archive..."
	@cd $(BUILDDIR) && zip -r nibble8_libretro_package.zip package
	@echo "Package created: nibble8_libretro_package.zip"

.PHONY: clean-package
clean-package:
	@rm -rf $(BUILDDIR)/package nibble8_libretro_package.zip
